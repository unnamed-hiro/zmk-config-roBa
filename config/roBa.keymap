#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W             &kp E         &kp R                 &kp T                                                   &kp Y        &kp U  &lt 4 I    &kp O    &kp P
&kp A         &kp S             &kp D         &kp F                 &kp G        &mkp MCLK             &lt 4 A              &kp H        &kp J  &kp K      &kp L    &kp SEMI
&kp Z         &kp X             &kp C         &kp V                 &kp B        &kp LG(LEFT_ARROW)    &kp LG(RIGHT_ARROW)  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_GUI  &kp LEFT_CONTROL  &kp LEFT_ALT  &mt LEFT_SHIFT LANG2  &lt 2 SPACE  &lt 3 LANG1           &lt 2 BACKSPACE      &lt 1 ENTER                             &lt 5 UNDERSCORE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM {
            bindings = <
&kp HASH      &kp N7        &kp N8        &kp N9        &kp SLASH                    &kp AMPERSAND          &kp PIPE         &kp SINGLE_QUOTE   &kp MINUS        &kp EQUAL
&kp PERCENT   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS   &trans    &trans  &kp LEFT_PARENTHESIS   &kp DOLLAR       &kp DOUBLE_QUOTES  &kp LEFT_BRACE   &kp LEFT_BRACKET
&kp ASTERISK  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS  &trans    &trans  &kp RIGHT_PARENTHESIS  &kp EXCLAMATION  &kp CARET          &kp RIGHT_BRACE  &kp RIGHT_BRACKET
&trans        &kp N0        &kp PERIOD    &trans        &kp SPACE  &trans    &trans  &trans                                                                      &kp UNDERSCORE
            >;
        };

        MOUSE {
            bindings = <
&kp ESCAPE  &trans  &kp LS(LG(R))  &kp COLON       &kp BACKSLASH                                             &kp LC(LEFT)        &kp LC(RIGHT_ARROW)  &kp LC(UP_ARROW)  &kp LEFT_PARENTHESIS  &kp PAGE_UP
&kp TAB     &trans  &trans         &trans          &kp BACKSLASH  &kp LC(LA(KP_NUMBER_0))    &kp UNDERSCORE  &kp LG(LEFT_ARROW)  &mkp LCLK            &kp UP_ARROW      &mkp RCLK             &kp PAGE_DOWN
&kp GRAVE   &trans  &trans         &trans          &kp AT         &kp EQUAL                  &trans          &kp LG(RIGHT)       &kp LEFT_ARROW       &kp DOWN_ARROW    &kp RIGHT_ARROW       &kp BACKSLASH
&trans      &trans  &kp LEFT_ALT   &kp LEFT_SHIFT  &trans         &trans                     &trans          &trans                                                                           &kp LEFT_SHIFT
            >;
        };

        ARROW {
            bindings = <
&kp LG(Z)      &kp LS(LG(Z))      &kp LS(LG(R))         &kp LG(W)      &kp LG(Q)                           &kp LC(LA(LEFT))  &kp LC(LA(RIGHT))  &kp LS(LG(UP_ARROW))  &trans  &trans
&kp LG(A)      &kp LG(D)          &kp LG(X)             &kp LG(C)      &kp LG(V)      &trans       &trans  &kp LG(LC(F))     &trans             &kp LC(LA(ENTER))     &trans  &trans
&kp LS(LG(V))  &kp LS(LC(SLASH))  &kp LG(SLASH)         &kp LS(LG(V))  &kp LS(LG(C))  &kp LC(F)    &trans  &kp LC(LA(D))     &kp LC(LA(F))      &kp LC(LA(G))         &trans  &trans
&kp LG(S)      &kp LS(LG(N5))     &kp LS(LG(NUMBER_4))  &trans         &trans         &trans       &trans  &trans                                                             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans        &bt BT_NXT    &bt BT_PRV
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans                                                  &trans
            >;
        };
    };
};
